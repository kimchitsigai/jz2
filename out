register_model() de : GenericModel
register_model() de : AmazonsModel
register_model() de : NanoFCLogitModel
register_model() de : NanoConvLogitModel
register_model() de : DeepConvFCLogitModel
register_model() de : DeepConvConvLogitModel
register_model() de : ResConvFCLogitModel
register_model() de : ResConvConvLogitModel
register_model() de : ResConvConvLogitPoolModel
register_model() de : UConvFCLogitModel
register_model() de : UConvConvLogitModel
register_model() de : Connect4BenchModel
######################################################################
#                              TRAINING                              #
######################################################################
setting-up pseudo-random generator...
creating and saving the model...
creating a generic model
GenericModel.__init() START

c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
GenericModel.__init() after jit.ScriptModule

c10 find_slot name=game_name  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=game_name  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=game_params  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=game_params  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=c  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=c  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=h  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=h  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=w  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=w  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=c_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=c_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=c_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=c_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=c_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=h_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=h_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=h_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=h_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=h_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=w_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=w_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=w_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=w_prime  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=w_prime  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=model_params  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=model_params  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=net1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=net1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557e0b170
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = conv2d_forward
c10 find_slot name=conv2d_forward  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp is_instance<function> py::jit::import(torch::jit)
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding_mode
c10 find_slot name=padding_mode  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x55555720c890
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=net1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : net1
c10 set_or_add_slot : net1 , slot_type = 0x555557e06310
c10 set_or_add_slot : found slot after operation
c10 find_slot name=net2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=net2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557a03be0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = conv2d_forward
c10 find_slot name=conv2d_forward  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp is_instance<function> py::jit::import(torch::jit)
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding_mode
c10 find_slot name=padding_mode  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557e096a0
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=net2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : net2
c10 set_or_add_slot : net2 , slot_type = 0x555557e0a120
c10 set_or_add_slot : found slot after operation
c10 find_slot name=net3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=net3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557ff2e40
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = conv2d_forward
c10 find_slot name=conv2d_forward  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp is_instance<function> py::jit::import(torch::jit)
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding_mode
c10 find_slot name=padding_mode  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557ff2430
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=net3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : net3
c10 set_or_add_slot : net3 , slot_type = 0x555557ff4260
c10 set_or_add_slot : found slot after operation
c10 find_slot name=net4  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=net4  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net4  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=stride  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding_mode  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=groups  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=output_padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_channels  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=dilation  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=kernel_size  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=padding  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557e08c10
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = conv2d_forward
c10 find_slot name=conv2d_forward  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=conv2d_forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp is_instance<function> py::jit::import(torch::jit)
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding_mode
c10 find_slot name=padding_mode  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = stride
c10 find_slot name=stride  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = padding
c10 find_slot name=padding  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = dilation
c10 find_slot name=dilation  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = groups
c10 find_slot name=groups  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x55555811f8c0
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=net4  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net4  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=net4  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : net4
c10 set_or_add_slot : net4 , slot_type = 0x5555580250c0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=v1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555591e7190
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555591e6ed0
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=v1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : v1
c10 set_or_add_slot : v1 , slot_type = 0x5555591e68d0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=v2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x55555921e370
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555559222470
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=v2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : v2
c10 set_or_add_slot : v2 , slot_type = 0x55555922e470
c10 set_or_add_slot : found slot after operation
c10 find_slot name=pi1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x55555923dd40
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555559220b70
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=pi1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi1  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi1  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : pi1
c10 set_or_add_slot : pi1 , slot_type = 0x555559233790
c10 set_or_add_slot : found slot after operation
c10 find_slot name=pi2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555559248d10
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=0  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555559244400
c10 set_or_add_slot : found slot after operation
Module::get_module_slots() 
ModuleValue::asTuple() module_.get_module_slots
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
c10 find_slot name=pi2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi2  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi2  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
in jit.__init__.py OrderedModuleDict() register_module()

Module::register_module() : pi2
c10 set_or_add_slot : pi2 , slot_type = 0x555559250320
c10 set_or_add_slot : found slot after operation
c10 find_slot name=v3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
GenericModel._init() END 

ModuleValue::attr() in python_sugared_value.cpp START(), field = net1
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=net1  etype != r.entity_type()
c10 find_slot name=net1  etype != r.entity_type()
c10 find_slot name=net1  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = net2
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=net2  etype != r.entity_type()
c10 find_slot name=net2  etype != r.entity_type()
c10 find_slot name=net2  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = net3
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=net3  etype != r.entity_type()
c10 find_slot name=net3  etype != r.entity_type()
c10 find_slot name=net3  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = net4
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=net4  etype != r.entity_type()
c10 find_slot name=net4  etype != r.entity_type()
c10 find_slot name=net4  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = v1
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=v1  etype != r.entity_type()
c10 find_slot name=v1  etype != r.entity_type()
c10 find_slot name=v1  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = v2
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=v2  etype != r.entity_type()
c10 find_slot name=v2  etype != r.entity_type()
c10 find_slot name=v2  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = v3
c10 find_slot name=v3  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=v3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp after attr isinstance import(torch.nn).attr(Module)
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555592e7cf0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp after py::module::import(torch::jit).attr() 
ModuleValue::attr() in python_sugared_value.cpp before register_module()
Module::register_module() : v3
c10 set_or_add_slot : v3 , slot_type = 0x5555592ed030
c10 set_or_add_slot : found slot after operation
ModuleValue::attr() in python_sugared_value.cpp before find_module()
ModuleValue::attr() in python_sugared_value.cpp before ModuleValue::insertGetAttr()and returning ModuleValue
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = pi1
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=pi1  etype != r.entity_type()
c10 find_slot name=pi1  etype != r.entity_type()
c10 find_slot name=pi1  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = pi2
ModuleValue::attr() in python_sugared_value.cpp find_module(field) not null returning() 
c10 find_slot name=pi2  etype != r.entity_type()
c10 find_slot name=pi2  etype != r.entity_type()
c10 find_slot name=pi2  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = pi3
c10 find_slot name=pi3  etype=MODULE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=pi3  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp after attr isinstance import(torch.nn).attr(Module)
c10 find_slot name=_buffers  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=_modules  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=bias  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=in_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=out_features  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555592f7090
c10 set_or_add_slot : found slot after operation
c10 find_slot name=bias  etype != r.entity_type()
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=forward  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=reset_parameters  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp START(), field = weight
c10 find_slot name=weight  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = bias
c10 find_slot name=bias  etype != r.entity_type()
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp after py::module::import(torch::jit).attr() 
ModuleValue::attr() in python_sugared_value.cpp before register_module()
Module::register_module() : pi3
c10 set_or_add_slot : pi3 , slot_type = 0x5555592f0870
c10 set_or_add_slot : found slot after operation
ModuleValue::attr() in python_sugared_value.cpp before find_module()
ModuleValue::attr() in python_sugared_value.cpp before ModuleValue::insertGetAttr()and returning ModuleValue
ModuleValue::attr() in python_sugared_value.cpp START(), field = forward
c10 find_slot name=forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = _forward
c10 find_slot name=_forward  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp all first class returning() 
ModuleValue::attr() in python_sugared_value.cpp START(), field = c_prime
c10 find_slot name=c_prime  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = h_prime
c10 find_slot name=h_prime  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
ModuleValue::attr() in python_sugared_value.cpp START(), field = w_prime
c10 find_slot name=w_prime  etype=MODULE: slot de findAttributeSlot() = NULL 
ModuleValue::attr() in python_sugared_value.cpp after py::getattr
apply WEIGHT
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype != r.entity_type()
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
total #trainable params = 3218050
            +++ model +++ = GenericModel(
  (net1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net3): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net4): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (pi1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (pi2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v3): WeakScriptModuleProxy()
  (pi3): WeakScriptModuleProxy()
) GenericModel(
  (net1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net3): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (net4): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (pi1): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (pi2): _ConstSequential(
    (0): WeakScriptModuleProxy()
  )
  (v3): WeakScriptModuleProxy()
  (pi3): WeakScriptModuleProxy()
)
                      child_name: net1, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) net1 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: net2, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) net2 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: net3, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) net3 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: net4, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) net4 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: v1, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) v1 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: v2, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) v2 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: pi1, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) pi1 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: pi2, child_model: _ConstSequential(
  (0): WeakScriptModuleProxy()
) pi2 _ConstSequential(
  (0): WeakScriptModuleProxy()
)
                      child_name: v3, child_model: WeakScriptModuleProxy() v3 WeakScriptModuleProxy()
                      child_name: pi3, child_model: WeakScriptModuleProxy() pi3 WeakScriptModuleProxy()
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
call to save() de :  /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
type(model) apres create_model().to():  <class 'pypolygames.model_zoo.generic_model.GenericModel'>
Module::save() filename = /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
Module::get_parameters() 
in convertModule, before calling module.get_module_slots()
Module::get_module_slots() 
creating optimizer...
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_parameters() 
creating training environment...
Game generation devices: ['cuda:0']
is_server is  False
is_client is  False
ChannelAssembler() numActChannel = 1, jitModel = /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
ChannelAssembler() LOADING model i = 0, device = cuda:0, jitModel = /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
load() dans import.cpp start !!!!!!
ScriptModuleDeserializer::deserialize() dans import.cpp start 
ScriptModuleDeserializer::GetDescriptor() : torch.ModelDef dans import.cpp 
ScriptModuleDeserializer::deserialize() dans import.cpp end 
convertModule() dans import.cpp start, module_def.name = model
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 10
convertModule() dans import.cpp start, module_def.name = net1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555592c09c0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555592c0380
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net1
c10 set_or_add_slot : net1 , slot_type = 0x5555592b18f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557aa5560
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555559289fd0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net2
c10 set_or_add_slot : net2 , slot_type = 0x555557a1a830
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557a9faa0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557abcca0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net3
c10 set_or_add_slot : net3 , slot_type = 0x555557a0f800
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net4
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557985d20
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557a9d3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net4
c10 set_or_add_slot : net4 , slot_type = 0x555557992550
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555559276890
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557ae7970
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : v1
c10 set_or_add_slot : v1 , slot_type = 0x555557951cf0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555578dba60
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555572dc8f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : v2
c10 set_or_add_slot : v2 , slot_type = 0x555557a89bc0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555592904b0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555572e48c0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : pi1
c10 set_or_add_slot : pi1 , slot_type = 0x555557af95a0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557ac69d0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555572814a0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : pi2
c10 set_or_add_slot : pi2 , slot_type = 0x5555572eaa00
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557938e10
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : v3
c10 set_or_add_slot : v3 , slot_type = 0x555557299050
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555559294420
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : pi3
c10 set_or_add_slot : pi3 , slot_type = 0x5555572fcec0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
load() dans import.cpp end !!!!!!
ChannelAssembler() after models_.push_back(std::make_shared<TorchJitModel>(torch::jit::load(jitModel_)))
Module::get_modules() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_parameters() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Created ChannelAssembler in crete_training_environment()
ChannelAssembler() numActChannel = 1, jitModel = /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
ChannelAssembler() LOADING model i = 0, device = cuda:0, jitModel = /gpfsdswork/projects/idris/hpe/shpe033/Polygames/exps/dev/game_Hex11_model_None_feat_Hex11_False_False_False_0_False_0_GMT_20200411173115/model.pt
load() dans import.cpp start !!!!!!
ScriptModuleDeserializer::deserialize() dans import.cpp start 
ScriptModuleDeserializer::GetDescriptor() : torch.ModelDef dans import.cpp 
ScriptModuleDeserializer::deserialize() dans import.cpp end 
convertModule() dans import.cpp start, module_def.name = model
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 10
convertModule() dans import.cpp start, module_def.name = net1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555559264d70
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x55555779cf20
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net1
c10 set_or_add_slot : net1 , slot_type = 0x5555575c4b40
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557719360
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x5555579be740
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net2
c10 set_or_add_slot : net2 , slot_type = 0x55555772c380
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555578421c0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x55559e66c940
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net3
c10 set_or_add_slot : net3 , slot_type = 0x5555577ef650
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = net4
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557aef8f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=transposed  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : transposed , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557753df0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : net4
c10 set_or_add_slot : net4 , slot_type = 0x5555572e1260
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x5555577769a0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557b67150
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : v1
c10 set_or_add_slot : v1 , slot_type = 0x55555774f360
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557b5bf00
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557860000
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : v2
c10 set_or_add_slot : v2 , slot_type = 0x5555576a9950
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi1
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557423550
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x55555747c5a0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : pi1
c10 set_or_add_slot : pi1 , slot_type = 0x555557422a50
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi2
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 1
convertModule() dans import.cpp start, module_def.name = 0
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557722ac0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : 0
c10 set_or_add_slot : 0 , slot_type = 0x555557429890
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
Module::register_module() : pi2
c10 set_or_add_slot : pi2 , slot_type = 0x5555577e0470
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = v3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557ba0240
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : v3
c10 set_or_add_slot : v3 , slot_type = 0x55555775be70
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp start, module_def.name = pi3
convertModule() dans import.cpp atoms.size = 1
convertModule() dans import.cpp submodules_size = 0
convertModule() dans import.cpp parameters_size = 2
Module::register_parameter() : bias
c10 set_or_add_slot : bias , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
Module::register_parameter() : weight
c10 set_or_add_slot : weight , slot_type = 0x55555646c1e0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=__constants__  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : __constants__ , slot_type = 0x555557860190
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp end 
Module::register_module() : pi3
c10 set_or_add_slot : pi3 , slot_type = 0x5555592644d0
c10 set_or_add_slot : found slot after operation
convertModule() dans import.cpp parameters_size = 0
convertModule() dans import.cpp end 
load() dans import.cpp end !!!!!!
ChannelAssembler() after models_.push_back(std::make_shared<TorchJitModel>(torch::jit::load(jitModel_)))
Module::get_modules() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_parameters() 
Module::get_modules() 
Module::get_parameters() 
Module::get_parameters() 
Module::get_modules() 
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Module::get_modules() 
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
c10 find_slot name=training  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
c10 set_or_add_slot : training , slot_type = 0x55555646c3f0
c10 set_or_add_slot : found slot after operation
Opponent : Created ChannelAssembler in crete_training_environment()
create_training_environment() end
before update_model...
type(model) avant update_model():  <class 'pypolygames.model_zoo.generic_model.GenericModel'>
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict()
prefix: 
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict()
prefix: net1.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0'))])
prefix: net1.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0'))])
prefix: net2.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0'))])
prefix: net2.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0'))])
prefix: net3.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0'))])
prefix: net3.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0'))])
prefix: net4.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0'))])
prefix: net4.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0'))])
prefix: v1.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0'))])
prefix: v1.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0'))])
prefix: v2.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0'))])
prefix: v2.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0'))])
prefix: pi1.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0'))])
prefix: pi1.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0'))])
prefix: pi2.
state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0'))])
prefix: pi2.0.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0')), ('v3.bias', tensor([-0.0288], device='cuda:0')), ('v3.weight', tensor([[ 0.0095,  0.0520, -0.0330,  ...,  0.0585, -0.0283, -0.0719]],
       device='cuda:0'))])
prefix: v3.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0')), ('v3.bias', tensor([-0.0288], device='cuda:0')), ('v3.weight', tensor([[ 0.0095,  0.0520, -0.0330,  ...,  0.0585, -0.0283, -0.0719]],
       device='cuda:0'))])

state_dict() in module.py
Module::get_parameters() 
destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0')), ('v3.bias', tensor([-0.0288], device='cuda:0')), ('v3.weight', tensor([[ 0.0095,  0.0520, -0.0330,  ...,  0.0585, -0.0283, -0.0719]],
       device='cuda:0')), ('pi3.bias', tensor([ 0.0141, -0.0157, -0.0254,  0.0212, -0.0128, -0.0246, -0.0237, -0.0087,
        -0.0149,  0.0281, -0.0291, -0.0187,  0.0196, -0.0250, -0.0077,  0.0177,
         0.0243, -0.0167,  0.0249, -0.0310, -0.0162,  0.0115, -0.0039, -0.0131,
        -0.0124, -0.0185, -0.0065, -0.0021,  0.0140, -0.0225,  0.0223,  0.0140,
        -0.0098,  0.0164, -0.0089, -0.0247, -0.0106, -0.0216,  0.0280,  0.0310,
         0.0024, -0.0162, -0.0091, -0.0307,  0.0062,  0.0189, -0.0227, -0.0152,
         0.0208, -0.0179,  0.0302,  0.0211, -0.0308,  0.0302, -0.0136, -0.0166,
         0.0189, -0.0054, -0.0273,  0.0132,  0.0195, -0.0211, -0.0116,  0.0205,
         0.0051, -0.0234, -0.0025, -0.0162,  0.0073,  0.0099, -0.0110,  0.0223,
        -0.0277,  0.0288,  0.0108, -0.0181, -0.0292, -0.0068,  0.0211,  0.0071,
        -0.0202,  0.0228,  0.0226, -0.0104, -0.0003, -0.0054, -0.0069,  0.0266,
        -0.0146, -0.0166, -0.0105, -0.0137, -0.0073,  0.0030, -0.0096,  0.0211,
        -0.0054,  0.0188, -0.0086, -0.0090, -0.0039,  0.0103, -0.0122, -0.0152,
        -0.0253, -0.0080,  0.0032, -0.0117,  0.0269, -0.0006, -0.0150,  0.0174,
        -0.0147,  0.0227,  0.0219,  0.0133, -0.0310,  0.0254,  0.0304,  0.0137,
        -0.0046], device='cuda:0')), ('pi3.weight', tensor([[ 0.0049, -0.0537, -0.0110,  ...,  0.0553,  0.0077,  0.0635],
        [ 0.0516, -0.0159, -0.0240,  ...,  0.0344,  0.0097,  0.0345],
        [-0.0422,  0.0160,  0.0526,  ...,  0.0625,  0.0452,  0.0231],
        ...,
        [-0.0097,  0.0565,  0.0576,  ..., -0.0434,  0.0027, -0.0311],
        [ 0.0335,  0.0603,  0.0488,  ...,  0.0110,  0.0056,  0.0501],
        [-0.0611, -0.0365,  0.0666,  ..., -0.0655, -0.0584, -0.0465]],
       device='cuda:0'))])
prefix: pi3.
returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0')), ('v3.bias', tensor([-0.0288], device='cuda:0')), ('v3.weight', tensor([[ 0.0095,  0.0520, -0.0330,  ...,  0.0585, -0.0283, -0.0719]],
       device='cuda:0')), ('pi3.bias', tensor([ 0.0141, -0.0157, -0.0254,  0.0212, -0.0128, -0.0246, -0.0237, -0.0087,
        -0.0149,  0.0281, -0.0291, -0.0187,  0.0196, -0.0250, -0.0077,  0.0177,
         0.0243, -0.0167,  0.0249, -0.0310, -0.0162,  0.0115, -0.0039, -0.0131,
        -0.0124, -0.0185, -0.0065, -0.0021,  0.0140, -0.0225,  0.0223,  0.0140,
        -0.0098,  0.0164, -0.0089, -0.0247, -0.0106, -0.0216,  0.0280,  0.0310,
         0.0024, -0.0162, -0.0091, -0.0307,  0.0062,  0.0189, -0.0227, -0.0152,
         0.0208, -0.0179,  0.0302,  0.0211, -0.0308,  0.0302, -0.0136, -0.0166,
         0.0189, -0.0054, -0.0273,  0.0132,  0.0195, -0.0211, -0.0116,  0.0205,
         0.0051, -0.0234, -0.0025, -0.0162,  0.0073,  0.0099, -0.0110,  0.0223,
        -0.0277,  0.0288,  0.0108, -0.0181, -0.0292, -0.0068,  0.0211,  0.0071,
        -0.0202,  0.0228,  0.0226, -0.0104, -0.0003, -0.0054, -0.0069,  0.0266,
        -0.0146, -0.0166, -0.0105, -0.0137, -0.0073,  0.0030, -0.0096,  0.0211,
        -0.0054,  0.0188, -0.0086, -0.0090, -0.0039,  0.0103, -0.0122, -0.0152,
        -0.0253, -0.0080,  0.0032, -0.0117,  0.0269, -0.0006, -0.0150,  0.0174,
        -0.0147,  0.0227,  0.0219,  0.0133, -0.0310,  0.0254,  0.0304,  0.0137,
        -0.0046], device='cuda:0')), ('pi3.weight', tensor([[ 0.0049, -0.0537, -0.0110,  ...,  0.0553,  0.0077,  0.0635],
        [ 0.0516, -0.0159, -0.0240,  ...,  0.0344,  0.0097,  0.0345],
        [-0.0422,  0.0160,  0.0526,  ...,  0.0625,  0.0452,  0.0231],
        ...,
        [-0.0097,  0.0565,  0.0576,  ..., -0.0434,  0.0027, -0.0311],
        [ 0.0335,  0.0603,  0.0488,  ...,  0.0110,  0.0056,  0.0501],
        [-0.0611, -0.0365,  0.0666,  ..., -0.0655, -0.0584, -0.0465]],
       device='cuda:0'))])

returned destination: OrderedDict([('net1.0.bias', tensor([0.0225, 0.1039, 0.1834, 0.0264], device='cuda:0')), ('net1.0.weight', tensor([[[[ 0.3219, -0.2443,  0.0442],
          [ 0.1003, -0.1511,  0.0961],
          [-0.0723, -0.2824, -0.0826]],

         [[ 0.0403, -0.2857,  0.2271],
          [-0.1641, -0.1481, -0.1702],
          [ 0.2855, -0.0668, -0.0219]]],


        [[[ 0.0382,  0.2816,  0.2086],
          [ 0.0246,  0.3119, -0.0257],
          [-0.2312,  0.2208,  0.3189]],

         [[ 0.0939, -0.1874,  0.0633],
          [-0.1221, -0.3134, -0.3286],
          [-0.2449, -0.2081,  0.0816]]],


        [[[ 0.0082, -0.1277, -0.2540],
          [ 0.2148,  0.1898,  0.1695],
          [ 0.2917,  0.0351, -0.1592]],

         [[-0.1955, -0.0183,  0.1637],
          [ 0.0064,  0.0278,  0.3126],
          [ 0.0529,  0.0599,  0.0664]]],


        [[[-0.0801,  0.2649,  0.3267],
          [-0.1810,  0.2646,  0.1182],
          [ 0.1640,  0.2135, -0.1349]],

         [[ 0.0803, -0.3019, -0.0981],
          [-0.3302, -0.0819, -0.0502],
          [-0.2586,  0.2005,  0.0389]]]], device='cuda:0')), ('net2.0.bias', tensor([-0.0787,  0.0812,  0.0192, -0.1221], device='cuda:0')), ('net2.0.weight', tensor([[[[-0.1026,  0.2222, -0.2136],
          [-0.0426, -0.1815,  0.1189],
          [ 0.0201, -0.0364,  0.0672]],

         [[ 0.0671, -0.0038, -0.0765],
          [-0.0702, -0.2487, -0.1798],
          [-0.1392, -0.0678,  0.2306]],

         [[ 0.2266,  0.0030,  0.2807],
          [ 0.0999,  0.1624,  0.0436],
          [-0.0010,  0.1640,  0.2373]],

         [[-0.0879,  0.1451, -0.2548],
          [ 0.1026, -0.1993, -0.1467],
          [-0.1107,  0.1702,  0.0241]]],


        [[[-0.2039, -0.1712,  0.0037],
          [ 0.2135, -0.0829,  0.0282],
          [ 0.2384, -0.1805, -0.1301]],

         [[-0.2412, -0.1560, -0.0413],
          [-0.2026,  0.2342,  0.0431],
          [-0.0633, -0.0120,  0.2380]],

         [[-0.2193, -0.2821, -0.1552],
          [ 0.0604, -0.0447,  0.1282],
          [-0.1009, -0.1122,  0.0906]],

         [[ 0.1724, -0.1870, -0.1339],
          [ 0.1979, -0.1746,  0.0283],
          [-0.0758, -0.0288,  0.1798]]],


        [[[ 0.2754,  0.2733, -0.2328],
          [ 0.0182,  0.1147,  0.1812],
          [ 0.1925,  0.2622, -0.0436]],

         [[ 0.2556,  0.1289,  0.2197],
          [ 0.1608,  0.1567, -0.2307],
          [-0.2463,  0.1569, -0.1566]],

         [[ 0.0412,  0.2252,  0.2269],
          [ 0.0859, -0.2089, -0.0515],
          [-0.2589,  0.2300,  0.1113]],

         [[-0.1860,  0.2414, -0.2314],
          [ 0.2615,  0.0905, -0.2296],
          [ 0.0104, -0.0164,  0.1129]]],


        [[[ 0.2105,  0.0973,  0.0784],
          [-0.0234,  0.1538,  0.1727],
          [-0.1048, -0.0506, -0.0031]],

         [[-0.0803, -0.1062,  0.1052],
          [-0.2789,  0.0960,  0.0884],
          [ 0.2771, -0.0524, -0.1532]],

         [[ 0.0561,  0.0844, -0.1537],
          [ 0.0397,  0.2102,  0.2482],
          [-0.1787, -0.0075, -0.1158]],

         [[ 0.2033,  0.2184, -0.1069],
          [-0.1474,  0.1794, -0.2588],
          [ 0.0578, -0.0190,  0.2451]]]], device='cuda:0')), ('net3.0.bias', tensor([ 0.1530, -0.0380, -0.1349,  0.0054], device='cuda:0')), ('net3.0.weight', tensor([[[[-0.1317, -0.0592, -0.1549],
          [ 0.2373, -0.2086, -0.0688],
          [-0.1555,  0.1409,  0.0304]],

         [[ 0.0021, -0.2834, -0.0587],
          [-0.0134,  0.1759, -0.0806],
          [ 0.2132,  0.1941,  0.2367]],

         [[ 0.2673,  0.0674, -0.1880],
          [-0.1265,  0.0960, -0.1283],
          [-0.0527, -0.1691, -0.1327]],

         [[ 0.2166, -0.2804,  0.2047],
          [ 0.2653,  0.0650, -0.0555],
          [ 0.2875, -0.1245, -0.1990]]],


        [[[ 0.1679, -0.1842, -0.0537],
          [-0.0393, -0.1682, -0.2755],
          [-0.0378,  0.1115, -0.0324]],

         [[-0.2647, -0.1225,  0.2162],
          [ 0.0705, -0.2577, -0.1757],
          [-0.2166,  0.1402,  0.2470]],

         [[ 0.0203, -0.2858, -0.0626],
          [-0.0462,  0.2358,  0.1308],
          [-0.0953,  0.0988, -0.1334]],

         [[-0.2389,  0.0709, -0.2665],
          [-0.2348, -0.0640, -0.0834],
          [-0.0369,  0.1681, -0.0415]]],


        [[[-0.1991,  0.1382, -0.2351],
          [ 0.2661, -0.1141, -0.0951],
          [-0.2128,  0.2689,  0.1580]],

         [[-0.0043, -0.2637, -0.2493],
          [ 0.2727, -0.0104, -0.0113],
          [ 0.1451,  0.2191, -0.1044]],

         [[-0.2875, -0.2551, -0.0349],
          [ 0.1728,  0.2527,  0.0606],
          [-0.0270,  0.1865,  0.2140]],

         [[ 0.2238, -0.0216,  0.2578],
          [-0.2661, -0.2719,  0.0935],
          [-0.0207,  0.1694, -0.1055]]],


        [[[ 0.1615,  0.1082, -0.0762],
          [ 0.1424,  0.2168,  0.0895],
          [ 0.1491, -0.2098,  0.0302]],

         [[-0.2484,  0.1950,  0.1951],
          [ 0.2830,  0.2424,  0.1741],
          [-0.0873,  0.0335,  0.0210]],

         [[ 0.2838, -0.0900, -0.2695],
          [-0.0293, -0.1290, -0.2795],
          [ 0.2745,  0.2323, -0.1916]],

         [[ 0.1859,  0.0495, -0.2466],
          [ 0.1630,  0.0461, -0.2319],
          [ 0.1080, -0.1759, -0.2337]]]], device='cuda:0')), ('net4.0.bias', tensor([-0.1573, -0.1186,  0.1305, -0.1165], device='cuda:0')), ('net4.0.weight', tensor([[[[ 0.1761, -0.2556, -0.1488],
          [-0.1653,  0.1070,  0.1667],
          [ 0.0597, -0.0897,  0.1701]],

         [[-0.0213,  0.2309,  0.2775],
          [-0.2449, -0.1267,  0.2795],
          [-0.0194, -0.2048,  0.1284]],

         [[ 0.2402, -0.1722,  0.1360],
          [ 0.1094, -0.1769, -0.1984],
          [ 0.1136, -0.2828,  0.0491]],

         [[-0.2739,  0.1811,  0.1541],
          [ 0.0145, -0.1514,  0.2334],
          [ 0.1582,  0.2493, -0.0904]]],


        [[[ 0.1967, -0.0081, -0.1717],
          [-0.1734, -0.0558,  0.2437],
          [ 0.0359,  0.2602,  0.2137]],

         [[ 0.0623,  0.2628, -0.0258],
          [-0.1436, -0.1598,  0.0115],
          [ 0.1128,  0.1219, -0.0592]],

         [[-0.0261, -0.2072, -0.2774],
          [-0.2362, -0.1527, -0.1976],
          [-0.2131,  0.1395, -0.1536]],

         [[-0.0526, -0.0227, -0.0495],
          [ 0.2564, -0.1198, -0.2279],
          [ 0.1244,  0.2184, -0.0285]]],


        [[[-0.2069, -0.2857,  0.2517],
          [ 0.0508,  0.1366,  0.1102],
          [ 0.0644,  0.1705, -0.0142]],

         [[ 0.0027,  0.0433, -0.2326],
          [-0.2289,  0.0545, -0.0232],
          [-0.2591, -0.0493,  0.2768]],

         [[ 0.0784,  0.0482,  0.1636],
          [-0.2041,  0.1978, -0.1749],
          [ 0.2322,  0.1604,  0.2484]],

         [[ 0.0100, -0.1543, -0.1177],
          [ 0.0679, -0.0858, -0.1244],
          [-0.2180, -0.0964, -0.0441]]],


        [[[-0.1961, -0.1329, -0.0187],
          [-0.2474,  0.0832,  0.2056],
          [-0.2695,  0.0592, -0.0453]],

         [[-0.1974,  0.2181, -0.0022],
          [-0.0224, -0.0598, -0.0221],
          [ 0.1954,  0.2681,  0.1518]],

         [[-0.2455, -0.2055,  0.1129],
          [ 0.0045, -0.2343,  0.2247],
          [ 0.1116,  0.1528,  0.1534]],

         [[ 0.2364,  0.2661, -0.1648],
          [ 0.1362, -0.1268,  0.2149],
          [ 0.2189,  0.0862,  0.2774]]]], device='cuda:0')), ('v1.0.bias', tensor([-0.0293,  0.0136,  0.0426,  ..., -0.0144, -0.0450, -0.0244],
       device='cuda:0')), ('v1.0.weight', tensor([[-0.0358,  0.0470, -0.0478,  ...,  0.0277,  0.0343, -0.0606],
        [-0.0389,  0.0149, -0.0346,  ..., -0.0374, -0.0276,  0.0206],
        [-0.0097, -0.0180,  0.0268,  ..., -0.0202,  0.0009,  0.0589],
        ...,
        [-0.0219,  0.0217,  0.0108,  ..., -0.0416, -0.0268, -0.0581],
        [-0.0428, -0.0386,  0.0214,  ..., -0.0179, -0.0330,  0.0123],
        [-0.0374, -0.0381, -0.0444,  ..., -0.0217, -0.0233,  0.0373]],
       device='cuda:0')), ('v2.0.bias', tensor([ 0.0222,  0.0144, -0.0130,  ...,  0.0311, -0.0294, -0.0152],
       device='cuda:0')), ('v2.0.weight', tensor([[-0.0344, -0.0039,  0.0278,  ...,  0.0119, -0.0064,  0.0302],
        [-0.0069,  0.0298,  0.0015,  ...,  0.0264, -0.0359, -0.0155],
        [ 0.0473,  0.0124, -0.0322,  ..., -0.0362,  0.0519,  0.0169],
        ...,
        [-0.0350, -0.0299,  0.0059,  ..., -0.0055,  0.0474,  0.0171],
        [-0.0295, -0.0458, -0.0185,  ..., -0.0234, -0.0262, -0.0336],
        [ 0.0515,  0.0083, -0.0443,  ..., -0.0281,  0.0446,  0.0142]],
       device='cuda:0')), ('pi1.0.bias', tensor([ 0.0181, -0.0061,  0.0242,  ...,  0.0304,  0.0288, -0.0328],
       device='cuda:0')), ('pi1.0.weight', tensor([[ 0.0001,  0.0053,  0.0105,  ..., -0.0114, -0.0235, -0.0355],
        [ 0.0414, -0.0258, -0.0339,  ..., -0.0197, -0.0416,  0.0117],
        [-0.0253, -0.0511,  0.0104,  ..., -0.0486,  0.0015, -0.0473],
        ...,
        [-0.0289, -0.0311, -0.0010,  ...,  0.0596,  0.0196, -0.0221],
        [-0.0611, -0.0238,  0.0515,  ..., -0.0299,  0.0256,  0.0431],
        [ 0.0177,  0.0136,  0.0416,  ..., -0.0503,  0.0504, -0.0274]],
       device='cuda:0')), ('pi2.0.bias', tensor([-0.0032, -0.0279, -0.0007,  ..., -0.0286, -0.0027,  0.0245],
       device='cuda:0')), ('pi2.0.weight', tensor([[ 0.0136,  0.0299, -0.0330,  ..., -0.0536, -0.0311,  0.0444],
        [-0.0023,  0.0119, -0.0420,  ...,  0.0036,  0.0366,  0.0365],
        [-0.0447,  0.0505,  0.0472,  ..., -0.0436,  0.0107,  0.0114],
        ...,
        [-0.0407,  0.0373, -0.0480,  ..., -0.0484, -0.0513, -0.0355],
        [-0.0091, -0.0451, -0.0397,  ..., -0.0081,  0.0270, -0.0534],
        [-0.0022,  0.0102, -0.0018,  ..., -0.0086, -0.0107, -0.0267]],
       device='cuda:0')), ('v3.bias', tensor([-0.0288], device='cuda:0')), ('v3.weight', tensor([[ 0.0095,  0.0520, -0.0330,  ...,  0.0585, -0.0283, -0.0719]],
       device='cuda:0')), ('pi3.bias', tensor([ 0.0141, -0.0157, -0.0254,  0.0212, -0.0128, -0.0246, -0.0237, -0.0087,
        -0.0149,  0.0281, -0.0291, -0.0187,  0.0196, -0.0250, -0.0077,  0.0177,
         0.0243, -0.0167,  0.0249, -0.0310, -0.0162,  0.0115, -0.0039, -0.0131,
        -0.0124, -0.0185, -0.0065, -0.0021,  0.0140, -0.0225,  0.0223,  0.0140,
        -0.0098,  0.0164, -0.0089, -0.0247, -0.0106, -0.0216,  0.0280,  0.0310,
         0.0024, -0.0162, -0.0091, -0.0307,  0.0062,  0.0189, -0.0227, -0.0152,
         0.0208, -0.0179,  0.0302,  0.0211, -0.0308,  0.0302, -0.0136, -0.0166,
         0.0189, -0.0054, -0.0273,  0.0132,  0.0195, -0.0211, -0.0116,  0.0205,
         0.0051, -0.0234, -0.0025, -0.0162,  0.0073,  0.0099, -0.0110,  0.0223,
        -0.0277,  0.0288,  0.0108, -0.0181, -0.0292, -0.0068,  0.0211,  0.0071,
        -0.0202,  0.0228,  0.0226, -0.0104, -0.0003, -0.0054, -0.0069,  0.0266,
        -0.0146, -0.0166, -0.0105, -0.0137, -0.0073,  0.0030, -0.0096,  0.0211,
        -0.0054,  0.0188, -0.0086, -0.0090, -0.0039,  0.0103, -0.0122, -0.0152,
        -0.0253, -0.0080,  0.0032, -0.0117,  0.0269, -0.0006, -0.0150,  0.0174,
        -0.0147,  0.0227,  0.0219,  0.0133, -0.0310,  0.0254,  0.0304,  0.0137,
        -0.0046], device='cuda:0')), ('pi3.weight', tensor([[ 0.0049, -0.0537, -0.0110,  ...,  0.0553,  0.0077,  0.0635],
        [ 0.0516, -0.0159, -0.0240,  ...,  0.0344,  0.0097,  0.0345],
        [-0.0422,  0.0160,  0.0526,  ...,  0.0625,  0.0452,  0.0231],
        ...,
        [-0.0097,  0.0565,  0.0576,  ..., -0.0434,  0.0027, -0.0311],
        [ 0.0335,  0.0603,  0.0488,  ...,  0.0110,  0.0056,  0.0501],
        [-0.0611, -0.0365,  0.0666,  ..., -0.0655, -0.0584, -0.0465]],
       device='cuda:0'))])

 -- UPDATE MODEL -- models_.size=1
++++++++++++++++++++++++++++ loadModelStateDict() ++++++++++++++++++++++++++++
type de model = torch::jit::script::Module
Module::get_modules() 
       get_modules().iterator -> module.name : __module__.model.net1
       get_modules().iterator -> module.name : __module__.model.net2
       get_modules().iterator -> module.name : __module__.model.net3
       get_modules().iterator -> module.name : __module__.model.net4
       get_modules().iterator -> module.name : __module__.model.v1
       get_modules().iterator -> module.name : __module__.model.v2
       get_modules().iterator -> module.name : __module__.model.pi1
       get_modules().iterator -> module.name : __module__.model.pi2
       get_modules().iterator -> module.name : __module__.model.v3
       get_modules().iterator -> module.name : __module__.model.pi3
Module::get_parameters() 
       +++++++++ ptr = pi3.weight +++++++++
       copyModelStateDict: Known state dict entry 'pi3.weight' -- module 'pi3'
Module::get_modules() 
Module::get_parameters() 
                  get_parameters().iterator -> (sub)slot(parameter).name : bias
                  get_parameters().iterator -> (sub)slot(parameter).name : weight
type de subModule = torch::jit::script::Module*
copyModelStateDict: submodule '0x7fffffff7748'
copyModelStateDict: memberNamePtr 'weight'
copyModelStateDict: ptr ''
copyModelStateDict: memberNameString 'weight'
copyModelStateDict: #ifdef PYTORCH12
c10 find_slot name=weight  etype=PARAMETER: slot de findAttributeSlot() = NULL 
c10 find_slot name=weight  etype=ATTRIBUTE: slot de findAttributeSlot() = NULL 
copyModelStateDict: Unknown state dict entry 'pi3.weight' -- could not find parameter/buffer 'weight'
